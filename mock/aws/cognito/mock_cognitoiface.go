// Code generated by MockGen. DO NOT EDIT.
// Source: cognitoiface.go
//
// Generated by this command:
//
//	mockgen -source=cognitoiface.go -package=mock_cognitoiface -destination=../../../mock/aws/cognito/mock_cognitoiface.go -self_package=iface-sample/aws/cognito/cognitoiface
//

// Package mock_cognitoiface is a generated GoMock package.
package mock_cognitoiface

import (
	context "context"
	reflect "reflect"

	. "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	cognitoidentityprovider "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	gomock "go.uber.org/mock/gomock"
)

// MockCognitoIDProvider is a mock of CognitoIDProvider interface.
type MockCognitoIDProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCognitoIDProviderMockRecorder
}

// MockCognitoIDProviderMockRecorder is the mock recorder for MockCognitoIDProvider.
type MockCognitoIDProviderMockRecorder struct {
	mock *MockCognitoIDProvider
}

// NewMockCognitoIDProvider creates a new mock instance.
func NewMockCognitoIDProvider(ctrl *gomock.Controller) *MockCognitoIDProvider {
	mock := &MockCognitoIDProvider{ctrl: ctrl}
	mock.recorder = &MockCognitoIDProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCognitoIDProvider) EXPECT() *MockCognitoIDProviderMockRecorder {
	return m.recorder
}

// AddCustomAttributes mocks base method.
func (m *MockCognitoIDProvider) AddCustomAttributes(ctx context.Context, params *AddCustomAttributesInput, optFns ...func(*Options)) (*AddCustomAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCustomAttributes", varargs...)
	ret0, _ := ret[0].(*AddCustomAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCustomAttributes indicates an expected call of AddCustomAttributes.
func (mr *MockCognitoIDProviderMockRecorder) AddCustomAttributes(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomAttributes", reflect.TypeOf((*MockCognitoIDProvider)(nil).AddCustomAttributes), varargs...)
}

// AdminAddUserToGroup mocks base method.
func (m *MockCognitoIDProvider) AdminAddUserToGroup(ctx context.Context, params *AdminAddUserToGroupInput, optFns ...func(*Options)) (*AdminAddUserToGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminAddUserToGroup", varargs...)
	ret0, _ := ret[0].(*AdminAddUserToGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminAddUserToGroup indicates an expected call of AdminAddUserToGroup.
func (mr *MockCognitoIDProviderMockRecorder) AdminAddUserToGroup(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminAddUserToGroup", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminAddUserToGroup), varargs...)
}

// AdminConfirmSignUp mocks base method.
func (m *MockCognitoIDProvider) AdminConfirmSignUp(ctx context.Context, params *AdminConfirmSignUpInput, optFns ...func(*Options)) (*AdminConfirmSignUpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminConfirmSignUp", varargs...)
	ret0, _ := ret[0].(*AdminConfirmSignUpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminConfirmSignUp indicates an expected call of AdminConfirmSignUp.
func (mr *MockCognitoIDProviderMockRecorder) AdminConfirmSignUp(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminConfirmSignUp", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminConfirmSignUp), varargs...)
}

// AdminCreateUser mocks base method.
func (m *MockCognitoIDProvider) AdminCreateUser(ctx context.Context, params *AdminCreateUserInput, optFns ...func(*Options)) (*AdminCreateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminCreateUser", varargs...)
	ret0, _ := ret[0].(*AdminCreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminCreateUser indicates an expected call of AdminCreateUser.
func (mr *MockCognitoIDProviderMockRecorder) AdminCreateUser(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminCreateUser", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminCreateUser), varargs...)
}

// AdminDeleteUser mocks base method.
func (m *MockCognitoIDProvider) AdminDeleteUser(ctx context.Context, params *AdminDeleteUserInput, optFns ...func(*Options)) (*AdminDeleteUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminDeleteUser", varargs...)
	ret0, _ := ret[0].(*AdminDeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminDeleteUser indicates an expected call of AdminDeleteUser.
func (mr *MockCognitoIDProviderMockRecorder) AdminDeleteUser(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDeleteUser", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminDeleteUser), varargs...)
}

// AdminDeleteUserAttributes mocks base method.
func (m *MockCognitoIDProvider) AdminDeleteUserAttributes(ctx context.Context, params *AdminDeleteUserAttributesInput, optFns ...func(*Options)) (*AdminDeleteUserAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminDeleteUserAttributes", varargs...)
	ret0, _ := ret[0].(*AdminDeleteUserAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminDeleteUserAttributes indicates an expected call of AdminDeleteUserAttributes.
func (mr *MockCognitoIDProviderMockRecorder) AdminDeleteUserAttributes(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDeleteUserAttributes", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminDeleteUserAttributes), varargs...)
}

// AdminDisableProviderForUser mocks base method.
func (m *MockCognitoIDProvider) AdminDisableProviderForUser(ctx context.Context, params *AdminDisableProviderForUserInput, optFns ...func(*Options)) (*AdminDisableProviderForUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminDisableProviderForUser", varargs...)
	ret0, _ := ret[0].(*AdminDisableProviderForUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminDisableProviderForUser indicates an expected call of AdminDisableProviderForUser.
func (mr *MockCognitoIDProviderMockRecorder) AdminDisableProviderForUser(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDisableProviderForUser", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminDisableProviderForUser), varargs...)
}

// AdminDisableUser mocks base method.
func (m *MockCognitoIDProvider) AdminDisableUser(ctx context.Context, params *AdminDisableUserInput, optFns ...func(*Options)) (*AdminDisableUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminDisableUser", varargs...)
	ret0, _ := ret[0].(*AdminDisableUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminDisableUser indicates an expected call of AdminDisableUser.
func (mr *MockCognitoIDProviderMockRecorder) AdminDisableUser(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDisableUser", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminDisableUser), varargs...)
}

// AdminEnableUser mocks base method.
func (m *MockCognitoIDProvider) AdminEnableUser(ctx context.Context, params *AdminEnableUserInput, optFns ...func(*Options)) (*AdminEnableUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminEnableUser", varargs...)
	ret0, _ := ret[0].(*AdminEnableUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminEnableUser indicates an expected call of AdminEnableUser.
func (mr *MockCognitoIDProviderMockRecorder) AdminEnableUser(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminEnableUser", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminEnableUser), varargs...)
}

// AdminForgetDevice mocks base method.
func (m *MockCognitoIDProvider) AdminForgetDevice(ctx context.Context, params *AdminForgetDeviceInput, optFns ...func(*Options)) (*AdminForgetDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminForgetDevice", varargs...)
	ret0, _ := ret[0].(*AdminForgetDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminForgetDevice indicates an expected call of AdminForgetDevice.
func (mr *MockCognitoIDProviderMockRecorder) AdminForgetDevice(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminForgetDevice", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminForgetDevice), varargs...)
}

// AdminGetDevice mocks base method.
func (m *MockCognitoIDProvider) AdminGetDevice(ctx context.Context, params *AdminGetDeviceInput, optFns ...func(*Options)) (*AdminGetDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminGetDevice", varargs...)
	ret0, _ := ret[0].(*AdminGetDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetDevice indicates an expected call of AdminGetDevice.
func (mr *MockCognitoIDProviderMockRecorder) AdminGetDevice(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetDevice", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminGetDevice), varargs...)
}

// AdminGetUser mocks base method.
func (m *MockCognitoIDProvider) AdminGetUser(ctx context.Context, params *AdminGetUserInput, optFns ...func(*Options)) (*AdminGetUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminGetUser", varargs...)
	ret0, _ := ret[0].(*AdminGetUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetUser indicates an expected call of AdminGetUser.
func (mr *MockCognitoIDProviderMockRecorder) AdminGetUser(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetUser", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminGetUser), varargs...)
}

// AdminInitiateAuth mocks base method.
func (m *MockCognitoIDProvider) AdminInitiateAuth(ctx context.Context, params *AdminInitiateAuthInput, optFns ...func(*Options)) (*AdminInitiateAuthOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminInitiateAuth", varargs...)
	ret0, _ := ret[0].(*AdminInitiateAuthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminInitiateAuth indicates an expected call of AdminInitiateAuth.
func (mr *MockCognitoIDProviderMockRecorder) AdminInitiateAuth(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminInitiateAuth", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminInitiateAuth), varargs...)
}

// AdminLinkProviderForUser mocks base method.
func (m *MockCognitoIDProvider) AdminLinkProviderForUser(ctx context.Context, params *AdminLinkProviderForUserInput, optFns ...func(*Options)) (*AdminLinkProviderForUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminLinkProviderForUser", varargs...)
	ret0, _ := ret[0].(*AdminLinkProviderForUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminLinkProviderForUser indicates an expected call of AdminLinkProviderForUser.
func (mr *MockCognitoIDProviderMockRecorder) AdminLinkProviderForUser(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminLinkProviderForUser", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminLinkProviderForUser), varargs...)
}

// AdminListDevices mocks base method.
func (m *MockCognitoIDProvider) AdminListDevices(ctx context.Context, params *AdminListDevicesInput, optFns ...func(*Options)) (*AdminListDevicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminListDevices", varargs...)
	ret0, _ := ret[0].(*AdminListDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminListDevices indicates an expected call of AdminListDevices.
func (mr *MockCognitoIDProviderMockRecorder) AdminListDevices(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminListDevices", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminListDevices), varargs...)
}

// AdminListGroupsForUser mocks base method.
func (m *MockCognitoIDProvider) AdminListGroupsForUser(ctx context.Context, params *AdminListGroupsForUserInput, optFns ...func(*Options)) (*AdminListGroupsForUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminListGroupsForUser", varargs...)
	ret0, _ := ret[0].(*AdminListGroupsForUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminListGroupsForUser indicates an expected call of AdminListGroupsForUser.
func (mr *MockCognitoIDProviderMockRecorder) AdminListGroupsForUser(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminListGroupsForUser", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminListGroupsForUser), varargs...)
}

// AdminListUserAuthEvents mocks base method.
func (m *MockCognitoIDProvider) AdminListUserAuthEvents(ctx context.Context, params *AdminListUserAuthEventsInput, optFns ...func(*Options)) (*AdminListUserAuthEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminListUserAuthEvents", varargs...)
	ret0, _ := ret[0].(*AdminListUserAuthEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminListUserAuthEvents indicates an expected call of AdminListUserAuthEvents.
func (mr *MockCognitoIDProviderMockRecorder) AdminListUserAuthEvents(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminListUserAuthEvents", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminListUserAuthEvents), varargs...)
}

// AdminRemoveUserFromGroup mocks base method.
func (m *MockCognitoIDProvider) AdminRemoveUserFromGroup(ctx context.Context, params *AdminRemoveUserFromGroupInput, optFns ...func(*Options)) (*AdminRemoveUserFromGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminRemoveUserFromGroup", varargs...)
	ret0, _ := ret[0].(*AdminRemoveUserFromGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminRemoveUserFromGroup indicates an expected call of AdminRemoveUserFromGroup.
func (mr *MockCognitoIDProviderMockRecorder) AdminRemoveUserFromGroup(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRemoveUserFromGroup", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminRemoveUserFromGroup), varargs...)
}

// AdminResetUserPassword mocks base method.
func (m *MockCognitoIDProvider) AdminResetUserPassword(ctx context.Context, params *AdminResetUserPasswordInput, optFns ...func(*Options)) (*AdminResetUserPasswordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminResetUserPassword", varargs...)
	ret0, _ := ret[0].(*AdminResetUserPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminResetUserPassword indicates an expected call of AdminResetUserPassword.
func (mr *MockCognitoIDProviderMockRecorder) AdminResetUserPassword(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminResetUserPassword", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminResetUserPassword), varargs...)
}

// AdminRespondToAuthChallenge mocks base method.
func (m *MockCognitoIDProvider) AdminRespondToAuthChallenge(ctx context.Context, params *AdminRespondToAuthChallengeInput, optFns ...func(*Options)) (*AdminRespondToAuthChallengeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminRespondToAuthChallenge", varargs...)
	ret0, _ := ret[0].(*AdminRespondToAuthChallengeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminRespondToAuthChallenge indicates an expected call of AdminRespondToAuthChallenge.
func (mr *MockCognitoIDProviderMockRecorder) AdminRespondToAuthChallenge(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRespondToAuthChallenge", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminRespondToAuthChallenge), varargs...)
}

// AdminSetUserMFAPreference mocks base method.
func (m *MockCognitoIDProvider) AdminSetUserMFAPreference(ctx context.Context, params *AdminSetUserMFAPreferenceInput, optFns ...func(*Options)) (*AdminSetUserMFAPreferenceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminSetUserMFAPreference", varargs...)
	ret0, _ := ret[0].(*AdminSetUserMFAPreferenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminSetUserMFAPreference indicates an expected call of AdminSetUserMFAPreference.
func (mr *MockCognitoIDProviderMockRecorder) AdminSetUserMFAPreference(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminSetUserMFAPreference", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminSetUserMFAPreference), varargs...)
}

// AdminSetUserPassword mocks base method.
func (m *MockCognitoIDProvider) AdminSetUserPassword(ctx context.Context, params *AdminSetUserPasswordInput, optFns ...func(*Options)) (*AdminSetUserPasswordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminSetUserPassword", varargs...)
	ret0, _ := ret[0].(*AdminSetUserPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminSetUserPassword indicates an expected call of AdminSetUserPassword.
func (mr *MockCognitoIDProviderMockRecorder) AdminSetUserPassword(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminSetUserPassword", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminSetUserPassword), varargs...)
}

// AdminSetUserSettings mocks base method.
func (m *MockCognitoIDProvider) AdminSetUserSettings(ctx context.Context, params *AdminSetUserSettingsInput, optFns ...func(*Options)) (*AdminSetUserSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminSetUserSettings", varargs...)
	ret0, _ := ret[0].(*AdminSetUserSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminSetUserSettings indicates an expected call of AdminSetUserSettings.
func (mr *MockCognitoIDProviderMockRecorder) AdminSetUserSettings(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminSetUserSettings", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminSetUserSettings), varargs...)
}

// AdminUpdateAuthEventFeedback mocks base method.
func (m *MockCognitoIDProvider) AdminUpdateAuthEventFeedback(ctx context.Context, params *AdminUpdateAuthEventFeedbackInput, optFns ...func(*Options)) (*AdminUpdateAuthEventFeedbackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminUpdateAuthEventFeedback", varargs...)
	ret0, _ := ret[0].(*AdminUpdateAuthEventFeedbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateAuthEventFeedback indicates an expected call of AdminUpdateAuthEventFeedback.
func (mr *MockCognitoIDProviderMockRecorder) AdminUpdateAuthEventFeedback(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateAuthEventFeedback", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminUpdateAuthEventFeedback), varargs...)
}

// AdminUpdateDeviceStatus mocks base method.
func (m *MockCognitoIDProvider) AdminUpdateDeviceStatus(ctx context.Context, params *AdminUpdateDeviceStatusInput, optFns ...func(*Options)) (*AdminUpdateDeviceStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminUpdateDeviceStatus", varargs...)
	ret0, _ := ret[0].(*AdminUpdateDeviceStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateDeviceStatus indicates an expected call of AdminUpdateDeviceStatus.
func (mr *MockCognitoIDProviderMockRecorder) AdminUpdateDeviceStatus(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateDeviceStatus", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminUpdateDeviceStatus), varargs...)
}

// AdminUpdateUserAttributes mocks base method.
func (m *MockCognitoIDProvider) AdminUpdateUserAttributes(ctx context.Context, params *AdminUpdateUserAttributesInput, optFns ...func(*Options)) (*AdminUpdateUserAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminUpdateUserAttributes", varargs...)
	ret0, _ := ret[0].(*AdminUpdateUserAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateUserAttributes indicates an expected call of AdminUpdateUserAttributes.
func (mr *MockCognitoIDProviderMockRecorder) AdminUpdateUserAttributes(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateUserAttributes", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminUpdateUserAttributes), varargs...)
}

// AdminUserGlobalSignOut mocks base method.
func (m *MockCognitoIDProvider) AdminUserGlobalSignOut(ctx context.Context, params *AdminUserGlobalSignOutInput, optFns ...func(*Options)) (*AdminUserGlobalSignOutOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminUserGlobalSignOut", varargs...)
	ret0, _ := ret[0].(*AdminUserGlobalSignOutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUserGlobalSignOut indicates an expected call of AdminUserGlobalSignOut.
func (mr *MockCognitoIDProviderMockRecorder) AdminUserGlobalSignOut(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUserGlobalSignOut", reflect.TypeOf((*MockCognitoIDProvider)(nil).AdminUserGlobalSignOut), varargs...)
}

// AssociateSoftwareToken mocks base method.
func (m *MockCognitoIDProvider) AssociateSoftwareToken(ctx context.Context, params *AssociateSoftwareTokenInput, optFns ...func(*Options)) (*AssociateSoftwareTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateSoftwareToken", varargs...)
	ret0, _ := ret[0].(*AssociateSoftwareTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateSoftwareToken indicates an expected call of AssociateSoftwareToken.
func (mr *MockCognitoIDProviderMockRecorder) AssociateSoftwareToken(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateSoftwareToken", reflect.TypeOf((*MockCognitoIDProvider)(nil).AssociateSoftwareToken), varargs...)
}

// ChangePassword mocks base method.
func (m *MockCognitoIDProvider) ChangePassword(ctx context.Context, params *ChangePasswordInput, optFns ...func(*Options)) (*ChangePasswordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangePassword", varargs...)
	ret0, _ := ret[0].(*ChangePasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockCognitoIDProviderMockRecorder) ChangePassword(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockCognitoIDProvider)(nil).ChangePassword), varargs...)
}

// ConfirmDevice mocks base method.
func (m *MockCognitoIDProvider) ConfirmDevice(ctx context.Context, params *ConfirmDeviceInput, optFns ...func(*Options)) (*ConfirmDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfirmDevice", varargs...)
	ret0, _ := ret[0].(*ConfirmDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmDevice indicates an expected call of ConfirmDevice.
func (mr *MockCognitoIDProviderMockRecorder) ConfirmDevice(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmDevice", reflect.TypeOf((*MockCognitoIDProvider)(nil).ConfirmDevice), varargs...)
}

// ConfirmForgotPassword mocks base method.
func (m *MockCognitoIDProvider) ConfirmForgotPassword(ctx context.Context, params *ConfirmForgotPasswordInput, optFns ...func(*Options)) (*ConfirmForgotPasswordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfirmForgotPassword", varargs...)
	ret0, _ := ret[0].(*ConfirmForgotPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmForgotPassword indicates an expected call of ConfirmForgotPassword.
func (mr *MockCognitoIDProviderMockRecorder) ConfirmForgotPassword(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmForgotPassword", reflect.TypeOf((*MockCognitoIDProvider)(nil).ConfirmForgotPassword), varargs...)
}

// ConfirmSignUp mocks base method.
func (m *MockCognitoIDProvider) ConfirmSignUp(ctx context.Context, params *ConfirmSignUpInput, optFns ...func(*Options)) (*ConfirmSignUpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfirmSignUp", varargs...)
	ret0, _ := ret[0].(*ConfirmSignUpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmSignUp indicates an expected call of ConfirmSignUp.
func (mr *MockCognitoIDProviderMockRecorder) ConfirmSignUp(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmSignUp", reflect.TypeOf((*MockCognitoIDProvider)(nil).ConfirmSignUp), varargs...)
}

// CreateGroup mocks base method.
func (m *MockCognitoIDProvider) CreateGroup(ctx context.Context, params *CreateGroupInput, optFns ...func(*Options)) (*CreateGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroup", varargs...)
	ret0, _ := ret[0].(*CreateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockCognitoIDProviderMockRecorder) CreateGroup(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockCognitoIDProvider)(nil).CreateGroup), varargs...)
}

// CreateIdentityProvider mocks base method.
func (m *MockCognitoIDProvider) CreateIdentityProvider(ctx context.Context, params *CreateIdentityProviderInput, optFns ...func(*Options)) (*CreateIdentityProviderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIdentityProvider", varargs...)
	ret0, _ := ret[0].(*CreateIdentityProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentityProvider indicates an expected call of CreateIdentityProvider.
func (mr *MockCognitoIDProviderMockRecorder) CreateIdentityProvider(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityProvider", reflect.TypeOf((*MockCognitoIDProvider)(nil).CreateIdentityProvider), varargs...)
}

// CreateResourceServer mocks base method.
func (m *MockCognitoIDProvider) CreateResourceServer(ctx context.Context, params *CreateResourceServerInput, optFns ...func(*Options)) (*CreateResourceServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResourceServer", varargs...)
	ret0, _ := ret[0].(*CreateResourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceServer indicates an expected call of CreateResourceServer.
func (mr *MockCognitoIDProviderMockRecorder) CreateResourceServer(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceServer", reflect.TypeOf((*MockCognitoIDProvider)(nil).CreateResourceServer), varargs...)
}

// CreateUserImportJob mocks base method.
func (m *MockCognitoIDProvider) CreateUserImportJob(ctx context.Context, params *CreateUserImportJobInput, optFns ...func(*Options)) (*CreateUserImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserImportJob", varargs...)
	ret0, _ := ret[0].(*CreateUserImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserImportJob indicates an expected call of CreateUserImportJob.
func (mr *MockCognitoIDProviderMockRecorder) CreateUserImportJob(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserImportJob", reflect.TypeOf((*MockCognitoIDProvider)(nil).CreateUserImportJob), varargs...)
}

// CreateUserPool mocks base method.
func (m *MockCognitoIDProvider) CreateUserPool(ctx context.Context, params *CreateUserPoolInput, optFns ...func(*Options)) (*CreateUserPoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserPool", varargs...)
	ret0, _ := ret[0].(*CreateUserPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserPool indicates an expected call of CreateUserPool.
func (mr *MockCognitoIDProviderMockRecorder) CreateUserPool(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPool", reflect.TypeOf((*MockCognitoIDProvider)(nil).CreateUserPool), varargs...)
}

// CreateUserPoolClient mocks base method.
func (m *MockCognitoIDProvider) CreateUserPoolClient(ctx context.Context, params *CreateUserPoolClientInput, optFns ...func(*Options)) (*CreateUserPoolClientOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserPoolClient", varargs...)
	ret0, _ := ret[0].(*CreateUserPoolClientOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserPoolClient indicates an expected call of CreateUserPoolClient.
func (mr *MockCognitoIDProviderMockRecorder) CreateUserPoolClient(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPoolClient", reflect.TypeOf((*MockCognitoIDProvider)(nil).CreateUserPoolClient), varargs...)
}

// CreateUserPoolDomain mocks base method.
func (m *MockCognitoIDProvider) CreateUserPoolDomain(ctx context.Context, params *CreateUserPoolDomainInput, optFns ...func(*Options)) (*CreateUserPoolDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserPoolDomain", varargs...)
	ret0, _ := ret[0].(*CreateUserPoolDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserPoolDomain indicates an expected call of CreateUserPoolDomain.
func (mr *MockCognitoIDProviderMockRecorder) CreateUserPoolDomain(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPoolDomain", reflect.TypeOf((*MockCognitoIDProvider)(nil).CreateUserPoolDomain), varargs...)
}

// DeleteGroup mocks base method.
func (m *MockCognitoIDProvider) DeleteGroup(ctx context.Context, params *DeleteGroupInput, optFns ...func(*Options)) (*DeleteGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroup", varargs...)
	ret0, _ := ret[0].(*DeleteGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockCognitoIDProviderMockRecorder) DeleteGroup(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockCognitoIDProvider)(nil).DeleteGroup), varargs...)
}

// DeleteIdentityProvider mocks base method.
func (m *MockCognitoIDProvider) DeleteIdentityProvider(ctx context.Context, params *DeleteIdentityProviderInput, optFns ...func(*Options)) (*DeleteIdentityProviderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIdentityProvider", varargs...)
	ret0, _ := ret[0].(*DeleteIdentityProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIdentityProvider indicates an expected call of DeleteIdentityProvider.
func (mr *MockCognitoIDProviderMockRecorder) DeleteIdentityProvider(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentityProvider", reflect.TypeOf((*MockCognitoIDProvider)(nil).DeleteIdentityProvider), varargs...)
}

// DeleteResourceServer mocks base method.
func (m *MockCognitoIDProvider) DeleteResourceServer(ctx context.Context, params *DeleteResourceServerInput, optFns ...func(*Options)) (*DeleteResourceServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourceServer", varargs...)
	ret0, _ := ret[0].(*DeleteResourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourceServer indicates an expected call of DeleteResourceServer.
func (mr *MockCognitoIDProviderMockRecorder) DeleteResourceServer(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceServer", reflect.TypeOf((*MockCognitoIDProvider)(nil).DeleteResourceServer), varargs...)
}

// DeleteUser mocks base method.
func (m *MockCognitoIDProvider) DeleteUser(ctx context.Context, params *DeleteUserInput, optFns ...func(*Options)) (*DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(*DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockCognitoIDProviderMockRecorder) DeleteUser(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockCognitoIDProvider)(nil).DeleteUser), varargs...)
}

// DeleteUserAttributes mocks base method.
func (m *MockCognitoIDProvider) DeleteUserAttributes(ctx context.Context, params *DeleteUserAttributesInput, optFns ...func(*Options)) (*DeleteUserAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserAttributes", varargs...)
	ret0, _ := ret[0].(*DeleteUserAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserAttributes indicates an expected call of DeleteUserAttributes.
func (mr *MockCognitoIDProviderMockRecorder) DeleteUserAttributes(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAttributes", reflect.TypeOf((*MockCognitoIDProvider)(nil).DeleteUserAttributes), varargs...)
}

// DeleteUserPool mocks base method.
func (m *MockCognitoIDProvider) DeleteUserPool(ctx context.Context, params *DeleteUserPoolInput, optFns ...func(*Options)) (*DeleteUserPoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserPool", varargs...)
	ret0, _ := ret[0].(*DeleteUserPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserPool indicates an expected call of DeleteUserPool.
func (mr *MockCognitoIDProviderMockRecorder) DeleteUserPool(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPool", reflect.TypeOf((*MockCognitoIDProvider)(nil).DeleteUserPool), varargs...)
}

// DeleteUserPoolClient mocks base method.
func (m *MockCognitoIDProvider) DeleteUserPoolClient(ctx context.Context, params *DeleteUserPoolClientInput, optFns ...func(*Options)) (*DeleteUserPoolClientOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserPoolClient", varargs...)
	ret0, _ := ret[0].(*DeleteUserPoolClientOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserPoolClient indicates an expected call of DeleteUserPoolClient.
func (mr *MockCognitoIDProviderMockRecorder) DeleteUserPoolClient(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPoolClient", reflect.TypeOf((*MockCognitoIDProvider)(nil).DeleteUserPoolClient), varargs...)
}

// DeleteUserPoolDomain mocks base method.
func (m *MockCognitoIDProvider) DeleteUserPoolDomain(ctx context.Context, params *DeleteUserPoolDomainInput, optFns ...func(*Options)) (*DeleteUserPoolDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserPoolDomain", varargs...)
	ret0, _ := ret[0].(*DeleteUserPoolDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserPoolDomain indicates an expected call of DeleteUserPoolDomain.
func (mr *MockCognitoIDProviderMockRecorder) DeleteUserPoolDomain(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPoolDomain", reflect.TypeOf((*MockCognitoIDProvider)(nil).DeleteUserPoolDomain), varargs...)
}

// DescribeIdentityProvider mocks base method.
func (m *MockCognitoIDProvider) DescribeIdentityProvider(ctx context.Context, params *DescribeIdentityProviderInput, optFns ...func(*Options)) (*DescribeIdentityProviderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIdentityProvider", varargs...)
	ret0, _ := ret[0].(*DescribeIdentityProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIdentityProvider indicates an expected call of DescribeIdentityProvider.
func (mr *MockCognitoIDProviderMockRecorder) DescribeIdentityProvider(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIdentityProvider", reflect.TypeOf((*MockCognitoIDProvider)(nil).DescribeIdentityProvider), varargs...)
}

// DescribeResourceServer mocks base method.
func (m *MockCognitoIDProvider) DescribeResourceServer(ctx context.Context, params *DescribeResourceServerInput, optFns ...func(*Options)) (*DescribeResourceServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeResourceServer", varargs...)
	ret0, _ := ret[0].(*DescribeResourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResourceServer indicates an expected call of DescribeResourceServer.
func (mr *MockCognitoIDProviderMockRecorder) DescribeResourceServer(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceServer", reflect.TypeOf((*MockCognitoIDProvider)(nil).DescribeResourceServer), varargs...)
}

// DescribeRiskConfiguration mocks base method.
func (m *MockCognitoIDProvider) DescribeRiskConfiguration(ctx context.Context, params *DescribeRiskConfigurationInput, optFns ...func(*Options)) (*DescribeRiskConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRiskConfiguration", varargs...)
	ret0, _ := ret[0].(*DescribeRiskConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRiskConfiguration indicates an expected call of DescribeRiskConfiguration.
func (mr *MockCognitoIDProviderMockRecorder) DescribeRiskConfiguration(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRiskConfiguration", reflect.TypeOf((*MockCognitoIDProvider)(nil).DescribeRiskConfiguration), varargs...)
}

// DescribeUserImportJob mocks base method.
func (m *MockCognitoIDProvider) DescribeUserImportJob(ctx context.Context, params *DescribeUserImportJobInput, optFns ...func(*Options)) (*DescribeUserImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserImportJob", varargs...)
	ret0, _ := ret[0].(*DescribeUserImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserImportJob indicates an expected call of DescribeUserImportJob.
func (mr *MockCognitoIDProviderMockRecorder) DescribeUserImportJob(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserImportJob", reflect.TypeOf((*MockCognitoIDProvider)(nil).DescribeUserImportJob), varargs...)
}

// DescribeUserPool mocks base method.
func (m *MockCognitoIDProvider) DescribeUserPool(ctx context.Context, params *DescribeUserPoolInput, optFns ...func(*Options)) (*DescribeUserPoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserPool", varargs...)
	ret0, _ := ret[0].(*DescribeUserPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserPool indicates an expected call of DescribeUserPool.
func (mr *MockCognitoIDProviderMockRecorder) DescribeUserPool(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserPool", reflect.TypeOf((*MockCognitoIDProvider)(nil).DescribeUserPool), varargs...)
}

// DescribeUserPoolClient mocks base method.
func (m *MockCognitoIDProvider) DescribeUserPoolClient(ctx context.Context, params *DescribeUserPoolClientInput, optFns ...func(*Options)) (*DescribeUserPoolClientOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserPoolClient", varargs...)
	ret0, _ := ret[0].(*DescribeUserPoolClientOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserPoolClient indicates an expected call of DescribeUserPoolClient.
func (mr *MockCognitoIDProviderMockRecorder) DescribeUserPoolClient(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserPoolClient", reflect.TypeOf((*MockCognitoIDProvider)(nil).DescribeUserPoolClient), varargs...)
}

// DescribeUserPoolDomain mocks base method.
func (m *MockCognitoIDProvider) DescribeUserPoolDomain(ctx context.Context, params *DescribeUserPoolDomainInput, optFns ...func(*Options)) (*DescribeUserPoolDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserPoolDomain", varargs...)
	ret0, _ := ret[0].(*DescribeUserPoolDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserPoolDomain indicates an expected call of DescribeUserPoolDomain.
func (mr *MockCognitoIDProviderMockRecorder) DescribeUserPoolDomain(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserPoolDomain", reflect.TypeOf((*MockCognitoIDProvider)(nil).DescribeUserPoolDomain), varargs...)
}

// ForgetDevice mocks base method.
func (m *MockCognitoIDProvider) ForgetDevice(ctx context.Context, params *ForgetDeviceInput, optFns ...func(*Options)) (*ForgetDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForgetDevice", varargs...)
	ret0, _ := ret[0].(*ForgetDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgetDevice indicates an expected call of ForgetDevice.
func (mr *MockCognitoIDProviderMockRecorder) ForgetDevice(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgetDevice", reflect.TypeOf((*MockCognitoIDProvider)(nil).ForgetDevice), varargs...)
}

// ForgotPassword mocks base method.
func (m *MockCognitoIDProvider) ForgotPassword(ctx context.Context, params *ForgotPasswordInput, optFns ...func(*Options)) (*ForgotPasswordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForgotPassword", varargs...)
	ret0, _ := ret[0].(*ForgotPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockCognitoIDProviderMockRecorder) ForgotPassword(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockCognitoIDProvider)(nil).ForgotPassword), varargs...)
}

// GetCSVHeader mocks base method.
func (m *MockCognitoIDProvider) GetCSVHeader(ctx context.Context, params *GetCSVHeaderInput, optFns ...func(*Options)) (*GetCSVHeaderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSVHeader", varargs...)
	ret0, _ := ret[0].(*GetCSVHeaderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSVHeader indicates an expected call of GetCSVHeader.
func (mr *MockCognitoIDProviderMockRecorder) GetCSVHeader(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSVHeader", reflect.TypeOf((*MockCognitoIDProvider)(nil).GetCSVHeader), varargs...)
}

// GetDevice mocks base method.
func (m *MockCognitoIDProvider) GetDevice(ctx context.Context, params *GetDeviceInput, optFns ...func(*Options)) (*GetDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDevice", varargs...)
	ret0, _ := ret[0].(*GetDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockCognitoIDProviderMockRecorder) GetDevice(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockCognitoIDProvider)(nil).GetDevice), varargs...)
}

// GetGroup mocks base method.
func (m *MockCognitoIDProvider) GetGroup(ctx context.Context, params *GetGroupInput, optFns ...func(*Options)) (*GetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroup", varargs...)
	ret0, _ := ret[0].(*GetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockCognitoIDProviderMockRecorder) GetGroup(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockCognitoIDProvider)(nil).GetGroup), varargs...)
}

// GetIdentityProviderByIdentifier mocks base method.
func (m *MockCognitoIDProvider) GetIdentityProviderByIdentifier(ctx context.Context, params *GetIdentityProviderByIdentifierInput, optFns ...func(*Options)) (*GetIdentityProviderByIdentifierOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdentityProviderByIdentifier", varargs...)
	ret0, _ := ret[0].(*GetIdentityProviderByIdentifierOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProviderByIdentifier indicates an expected call of GetIdentityProviderByIdentifier.
func (mr *MockCognitoIDProviderMockRecorder) GetIdentityProviderByIdentifier(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviderByIdentifier", reflect.TypeOf((*MockCognitoIDProvider)(nil).GetIdentityProviderByIdentifier), varargs...)
}

// GetLogDeliveryConfiguration mocks base method.
func (m *MockCognitoIDProvider) GetLogDeliveryConfiguration(ctx context.Context, params *GetLogDeliveryConfigurationInput, optFns ...func(*Options)) (*GetLogDeliveryConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLogDeliveryConfiguration", varargs...)
	ret0, _ := ret[0].(*GetLogDeliveryConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogDeliveryConfiguration indicates an expected call of GetLogDeliveryConfiguration.
func (mr *MockCognitoIDProviderMockRecorder) GetLogDeliveryConfiguration(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogDeliveryConfiguration", reflect.TypeOf((*MockCognitoIDProvider)(nil).GetLogDeliveryConfiguration), varargs...)
}

// GetSigningCertificate mocks base method.
func (m *MockCognitoIDProvider) GetSigningCertificate(ctx context.Context, params *GetSigningCertificateInput, optFns ...func(*Options)) (*GetSigningCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSigningCertificate", varargs...)
	ret0, _ := ret[0].(*GetSigningCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSigningCertificate indicates an expected call of GetSigningCertificate.
func (mr *MockCognitoIDProviderMockRecorder) GetSigningCertificate(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSigningCertificate", reflect.TypeOf((*MockCognitoIDProvider)(nil).GetSigningCertificate), varargs...)
}

// GetUICustomization mocks base method.
func (m *MockCognitoIDProvider) GetUICustomization(ctx context.Context, params *GetUICustomizationInput, optFns ...func(*Options)) (*GetUICustomizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUICustomization", varargs...)
	ret0, _ := ret[0].(*GetUICustomizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUICustomization indicates an expected call of GetUICustomization.
func (mr *MockCognitoIDProviderMockRecorder) GetUICustomization(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUICustomization", reflect.TypeOf((*MockCognitoIDProvider)(nil).GetUICustomization), varargs...)
}

// GetUser mocks base method.
func (m *MockCognitoIDProvider) GetUser(ctx context.Context, params *GetUserInput, optFns ...func(*Options)) (*GetUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*GetUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockCognitoIDProviderMockRecorder) GetUser(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockCognitoIDProvider)(nil).GetUser), varargs...)
}

// GetUserAttributeVerificationCode mocks base method.
func (m *MockCognitoIDProvider) GetUserAttributeVerificationCode(ctx context.Context, params *GetUserAttributeVerificationCodeInput, optFns ...func(*Options)) (*GetUserAttributeVerificationCodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserAttributeVerificationCode", varargs...)
	ret0, _ := ret[0].(*GetUserAttributeVerificationCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAttributeVerificationCode indicates an expected call of GetUserAttributeVerificationCode.
func (mr *MockCognitoIDProviderMockRecorder) GetUserAttributeVerificationCode(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAttributeVerificationCode", reflect.TypeOf((*MockCognitoIDProvider)(nil).GetUserAttributeVerificationCode), varargs...)
}

// GetUserPoolMfaConfig mocks base method.
func (m *MockCognitoIDProvider) GetUserPoolMfaConfig(ctx context.Context, params *GetUserPoolMfaConfigInput, optFns ...func(*Options)) (*GetUserPoolMfaConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserPoolMfaConfig", varargs...)
	ret0, _ := ret[0].(*GetUserPoolMfaConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPoolMfaConfig indicates an expected call of GetUserPoolMfaConfig.
func (mr *MockCognitoIDProviderMockRecorder) GetUserPoolMfaConfig(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPoolMfaConfig", reflect.TypeOf((*MockCognitoIDProvider)(nil).GetUserPoolMfaConfig), varargs...)
}

// GlobalSignOut mocks base method.
func (m *MockCognitoIDProvider) GlobalSignOut(ctx context.Context, params *GlobalSignOutInput, optFns ...func(*Options)) (*GlobalSignOutOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GlobalSignOut", varargs...)
	ret0, _ := ret[0].(*GlobalSignOutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GlobalSignOut indicates an expected call of GlobalSignOut.
func (mr *MockCognitoIDProviderMockRecorder) GlobalSignOut(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalSignOut", reflect.TypeOf((*MockCognitoIDProvider)(nil).GlobalSignOut), varargs...)
}

// InitiateAuth mocks base method.
func (m *MockCognitoIDProvider) InitiateAuth(ctx context.Context, params *InitiateAuthInput, optFns ...func(*Options)) (*InitiateAuthOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitiateAuth", varargs...)
	ret0, _ := ret[0].(*InitiateAuthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateAuth indicates an expected call of InitiateAuth.
func (mr *MockCognitoIDProviderMockRecorder) InitiateAuth(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateAuth", reflect.TypeOf((*MockCognitoIDProvider)(nil).InitiateAuth), varargs...)
}

// ListDevices mocks base method.
func (m *MockCognitoIDProvider) ListDevices(ctx context.Context, params *ListDevicesInput, optFns ...func(*Options)) (*ListDevicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevices", varargs...)
	ret0, _ := ret[0].(*ListDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockCognitoIDProviderMockRecorder) ListDevices(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockCognitoIDProvider)(nil).ListDevices), varargs...)
}

// ListGroups mocks base method.
func (m *MockCognitoIDProvider) ListGroups(ctx context.Context, params *ListGroupsInput, optFns ...func(*Options)) (*ListGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroups", varargs...)
	ret0, _ := ret[0].(*ListGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups.
func (mr *MockCognitoIDProviderMockRecorder) ListGroups(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockCognitoIDProvider)(nil).ListGroups), varargs...)
}

// ListIdentityProviders mocks base method.
func (m *MockCognitoIDProvider) ListIdentityProviders(ctx context.Context, params *ListIdentityProvidersInput, optFns ...func(*Options)) (*ListIdentityProvidersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIdentityProviders", varargs...)
	ret0, _ := ret[0].(*ListIdentityProvidersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdentityProviders indicates an expected call of ListIdentityProviders.
func (mr *MockCognitoIDProviderMockRecorder) ListIdentityProviders(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentityProviders", reflect.TypeOf((*MockCognitoIDProvider)(nil).ListIdentityProviders), varargs...)
}

// ListResourceServers mocks base method.
func (m *MockCognitoIDProvider) ListResourceServers(ctx context.Context, params *ListResourceServersInput, optFns ...func(*Options)) (*ListResourceServersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceServers", varargs...)
	ret0, _ := ret[0].(*ListResourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceServers indicates an expected call of ListResourceServers.
func (mr *MockCognitoIDProviderMockRecorder) ListResourceServers(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceServers", reflect.TypeOf((*MockCognitoIDProvider)(nil).ListResourceServers), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockCognitoIDProvider) ListTagsForResource(ctx context.Context, params *ListTagsForResourceInput, optFns ...func(*Options)) (*ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockCognitoIDProviderMockRecorder) ListTagsForResource(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCognitoIDProvider)(nil).ListTagsForResource), varargs...)
}

// ListUserImportJobs mocks base method.
func (m *MockCognitoIDProvider) ListUserImportJobs(ctx context.Context, params *ListUserImportJobsInput, optFns ...func(*Options)) (*ListUserImportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserImportJobs", varargs...)
	ret0, _ := ret[0].(*ListUserImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserImportJobs indicates an expected call of ListUserImportJobs.
func (mr *MockCognitoIDProviderMockRecorder) ListUserImportJobs(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserImportJobs", reflect.TypeOf((*MockCognitoIDProvider)(nil).ListUserImportJobs), varargs...)
}

// ListUserPoolClients mocks base method.
func (m *MockCognitoIDProvider) ListUserPoolClients(ctx context.Context, params *ListUserPoolClientsInput, optFns ...func(*Options)) (*ListUserPoolClientsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserPoolClients", varargs...)
	ret0, _ := ret[0].(*ListUserPoolClientsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserPoolClients indicates an expected call of ListUserPoolClients.
func (mr *MockCognitoIDProviderMockRecorder) ListUserPoolClients(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserPoolClients", reflect.TypeOf((*MockCognitoIDProvider)(nil).ListUserPoolClients), varargs...)
}

// ListUserPools mocks base method.
func (m *MockCognitoIDProvider) ListUserPools(ctx context.Context, params *ListUserPoolsInput, optFns ...func(*Options)) (*ListUserPoolsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserPools", varargs...)
	ret0, _ := ret[0].(*ListUserPoolsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserPools indicates an expected call of ListUserPools.
func (mr *MockCognitoIDProviderMockRecorder) ListUserPools(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserPools", reflect.TypeOf((*MockCognitoIDProvider)(nil).ListUserPools), varargs...)
}

// ListUsers mocks base method.
func (m *MockCognitoIDProvider) ListUsers(ctx context.Context, params *ListUsersInput, optFns ...func(*Options)) (*ListUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsers", varargs...)
	ret0, _ := ret[0].(*ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockCognitoIDProviderMockRecorder) ListUsers(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockCognitoIDProvider)(nil).ListUsers), varargs...)
}

// ListUsersInGroup mocks base method.
func (m *MockCognitoIDProvider) ListUsersInGroup(ctx context.Context, params *ListUsersInGroupInput, optFns ...func(*Options)) (*ListUsersInGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersInGroup", varargs...)
	ret0, _ := ret[0].(*ListUsersInGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersInGroup indicates an expected call of ListUsersInGroup.
func (mr *MockCognitoIDProviderMockRecorder) ListUsersInGroup(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersInGroup", reflect.TypeOf((*MockCognitoIDProvider)(nil).ListUsersInGroup), varargs...)
}

// Options mocks base method.
func (m *MockCognitoIDProvider) Options() cognitoidentityprovider.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(cognitoidentityprovider.Options)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockCognitoIDProviderMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockCognitoIDProvider)(nil).Options))
}

// ResendConfirmationCode mocks base method.
func (m *MockCognitoIDProvider) ResendConfirmationCode(ctx context.Context, params *ResendConfirmationCodeInput, optFns ...func(*Options)) (*ResendConfirmationCodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResendConfirmationCode", varargs...)
	ret0, _ := ret[0].(*ResendConfirmationCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendConfirmationCode indicates an expected call of ResendConfirmationCode.
func (mr *MockCognitoIDProviderMockRecorder) ResendConfirmationCode(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendConfirmationCode", reflect.TypeOf((*MockCognitoIDProvider)(nil).ResendConfirmationCode), varargs...)
}

// RespondToAuthChallenge mocks base method.
func (m *MockCognitoIDProvider) RespondToAuthChallenge(ctx context.Context, params *RespondToAuthChallengeInput, optFns ...func(*Options)) (*RespondToAuthChallengeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RespondToAuthChallenge", varargs...)
	ret0, _ := ret[0].(*RespondToAuthChallengeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RespondToAuthChallenge indicates an expected call of RespondToAuthChallenge.
func (mr *MockCognitoIDProviderMockRecorder) RespondToAuthChallenge(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToAuthChallenge", reflect.TypeOf((*MockCognitoIDProvider)(nil).RespondToAuthChallenge), varargs...)
}

// RevokeToken mocks base method.
func (m *MockCognitoIDProvider) RevokeToken(ctx context.Context, params *RevokeTokenInput, optFns ...func(*Options)) (*RevokeTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeToken", varargs...)
	ret0, _ := ret[0].(*RevokeTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockCognitoIDProviderMockRecorder) RevokeToken(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockCognitoIDProvider)(nil).RevokeToken), varargs...)
}

// SetLogDeliveryConfiguration mocks base method.
func (m *MockCognitoIDProvider) SetLogDeliveryConfiguration(ctx context.Context, params *SetLogDeliveryConfigurationInput, optFns ...func(*Options)) (*SetLogDeliveryConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetLogDeliveryConfiguration", varargs...)
	ret0, _ := ret[0].(*SetLogDeliveryConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLogDeliveryConfiguration indicates an expected call of SetLogDeliveryConfiguration.
func (mr *MockCognitoIDProviderMockRecorder) SetLogDeliveryConfiguration(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogDeliveryConfiguration", reflect.TypeOf((*MockCognitoIDProvider)(nil).SetLogDeliveryConfiguration), varargs...)
}

// SetRiskConfiguration mocks base method.
func (m *MockCognitoIDProvider) SetRiskConfiguration(ctx context.Context, params *SetRiskConfigurationInput, optFns ...func(*Options)) (*SetRiskConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetRiskConfiguration", varargs...)
	ret0, _ := ret[0].(*SetRiskConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRiskConfiguration indicates an expected call of SetRiskConfiguration.
func (mr *MockCognitoIDProviderMockRecorder) SetRiskConfiguration(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRiskConfiguration", reflect.TypeOf((*MockCognitoIDProvider)(nil).SetRiskConfiguration), varargs...)
}

// SetUICustomization mocks base method.
func (m *MockCognitoIDProvider) SetUICustomization(ctx context.Context, params *SetUICustomizationInput, optFns ...func(*Options)) (*SetUICustomizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUICustomization", varargs...)
	ret0, _ := ret[0].(*SetUICustomizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUICustomization indicates an expected call of SetUICustomization.
func (mr *MockCognitoIDProviderMockRecorder) SetUICustomization(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUICustomization", reflect.TypeOf((*MockCognitoIDProvider)(nil).SetUICustomization), varargs...)
}

// SetUserMFAPreference mocks base method.
func (m *MockCognitoIDProvider) SetUserMFAPreference(ctx context.Context, params *SetUserMFAPreferenceInput, optFns ...func(*Options)) (*SetUserMFAPreferenceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserMFAPreference", varargs...)
	ret0, _ := ret[0].(*SetUserMFAPreferenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserMFAPreference indicates an expected call of SetUserMFAPreference.
func (mr *MockCognitoIDProviderMockRecorder) SetUserMFAPreference(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserMFAPreference", reflect.TypeOf((*MockCognitoIDProvider)(nil).SetUserMFAPreference), varargs...)
}

// SetUserPoolMfaConfig mocks base method.
func (m *MockCognitoIDProvider) SetUserPoolMfaConfig(ctx context.Context, params *SetUserPoolMfaConfigInput, optFns ...func(*Options)) (*SetUserPoolMfaConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserPoolMfaConfig", varargs...)
	ret0, _ := ret[0].(*SetUserPoolMfaConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserPoolMfaConfig indicates an expected call of SetUserPoolMfaConfig.
func (mr *MockCognitoIDProviderMockRecorder) SetUserPoolMfaConfig(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserPoolMfaConfig", reflect.TypeOf((*MockCognitoIDProvider)(nil).SetUserPoolMfaConfig), varargs...)
}

// SetUserSettings mocks base method.
func (m *MockCognitoIDProvider) SetUserSettings(ctx context.Context, params *SetUserSettingsInput, optFns ...func(*Options)) (*SetUserSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserSettings", varargs...)
	ret0, _ := ret[0].(*SetUserSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserSettings indicates an expected call of SetUserSettings.
func (mr *MockCognitoIDProviderMockRecorder) SetUserSettings(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserSettings", reflect.TypeOf((*MockCognitoIDProvider)(nil).SetUserSettings), varargs...)
}

// SignUp mocks base method.
func (m *MockCognitoIDProvider) SignUp(ctx context.Context, params *SignUpInput, optFns ...func(*Options)) (*SignUpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUp", varargs...)
	ret0, _ := ret[0].(*SignUpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockCognitoIDProviderMockRecorder) SignUp(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockCognitoIDProvider)(nil).SignUp), varargs...)
}

// StartUserImportJob mocks base method.
func (m *MockCognitoIDProvider) StartUserImportJob(ctx context.Context, params *StartUserImportJobInput, optFns ...func(*Options)) (*StartUserImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartUserImportJob", varargs...)
	ret0, _ := ret[0].(*StartUserImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartUserImportJob indicates an expected call of StartUserImportJob.
func (mr *MockCognitoIDProviderMockRecorder) StartUserImportJob(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUserImportJob", reflect.TypeOf((*MockCognitoIDProvider)(nil).StartUserImportJob), varargs...)
}

// StopUserImportJob mocks base method.
func (m *MockCognitoIDProvider) StopUserImportJob(ctx context.Context, params *StopUserImportJobInput, optFns ...func(*Options)) (*StopUserImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopUserImportJob", varargs...)
	ret0, _ := ret[0].(*StopUserImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopUserImportJob indicates an expected call of StopUserImportJob.
func (mr *MockCognitoIDProviderMockRecorder) StopUserImportJob(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopUserImportJob", reflect.TypeOf((*MockCognitoIDProvider)(nil).StopUserImportJob), varargs...)
}

// TagResource mocks base method.
func (m *MockCognitoIDProvider) TagResource(ctx context.Context, params *TagResourceInput, optFns ...func(*Options)) (*TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResource", varargs...)
	ret0, _ := ret[0].(*TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockCognitoIDProviderMockRecorder) TagResource(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCognitoIDProvider)(nil).TagResource), varargs...)
}

// UntagResource mocks base method.
func (m *MockCognitoIDProvider) UntagResource(ctx context.Context, params *UntagResourceInput, optFns ...func(*Options)) (*UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResource", varargs...)
	ret0, _ := ret[0].(*UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockCognitoIDProviderMockRecorder) UntagResource(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCognitoIDProvider)(nil).UntagResource), varargs...)
}

// UpdateAuthEventFeedback mocks base method.
func (m *MockCognitoIDProvider) UpdateAuthEventFeedback(ctx context.Context, params *UpdateAuthEventFeedbackInput, optFns ...func(*Options)) (*UpdateAuthEventFeedbackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAuthEventFeedback", varargs...)
	ret0, _ := ret[0].(*UpdateAuthEventFeedbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthEventFeedback indicates an expected call of UpdateAuthEventFeedback.
func (mr *MockCognitoIDProviderMockRecorder) UpdateAuthEventFeedback(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthEventFeedback", reflect.TypeOf((*MockCognitoIDProvider)(nil).UpdateAuthEventFeedback), varargs...)
}

// UpdateDeviceStatus mocks base method.
func (m *MockCognitoIDProvider) UpdateDeviceStatus(ctx context.Context, params *UpdateDeviceStatusInput, optFns ...func(*Options)) (*UpdateDeviceStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDeviceStatus", varargs...)
	ret0, _ := ret[0].(*UpdateDeviceStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeviceStatus indicates an expected call of UpdateDeviceStatus.
func (mr *MockCognitoIDProviderMockRecorder) UpdateDeviceStatus(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceStatus", reflect.TypeOf((*MockCognitoIDProvider)(nil).UpdateDeviceStatus), varargs...)
}

// UpdateGroup mocks base method.
func (m *MockCognitoIDProvider) UpdateGroup(ctx context.Context, params *UpdateGroupInput, optFns ...func(*Options)) (*UpdateGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroup", varargs...)
	ret0, _ := ret[0].(*UpdateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockCognitoIDProviderMockRecorder) UpdateGroup(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockCognitoIDProvider)(nil).UpdateGroup), varargs...)
}

// UpdateIdentityProvider mocks base method.
func (m *MockCognitoIDProvider) UpdateIdentityProvider(ctx context.Context, params *UpdateIdentityProviderInput, optFns ...func(*Options)) (*UpdateIdentityProviderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIdentityProvider", varargs...)
	ret0, _ := ret[0].(*UpdateIdentityProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentityProvider indicates an expected call of UpdateIdentityProvider.
func (mr *MockCognitoIDProviderMockRecorder) UpdateIdentityProvider(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityProvider", reflect.TypeOf((*MockCognitoIDProvider)(nil).UpdateIdentityProvider), varargs...)
}

// UpdateResourceServer mocks base method.
func (m *MockCognitoIDProvider) UpdateResourceServer(ctx context.Context, params *UpdateResourceServerInput, optFns ...func(*Options)) (*UpdateResourceServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResourceServer", varargs...)
	ret0, _ := ret[0].(*UpdateResourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceServer indicates an expected call of UpdateResourceServer.
func (mr *MockCognitoIDProviderMockRecorder) UpdateResourceServer(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceServer", reflect.TypeOf((*MockCognitoIDProvider)(nil).UpdateResourceServer), varargs...)
}

// UpdateUserAttributes mocks base method.
func (m *MockCognitoIDProvider) UpdateUserAttributes(ctx context.Context, params *UpdateUserAttributesInput, optFns ...func(*Options)) (*UpdateUserAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserAttributes", varargs...)
	ret0, _ := ret[0].(*UpdateUserAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserAttributes indicates an expected call of UpdateUserAttributes.
func (mr *MockCognitoIDProviderMockRecorder) UpdateUserAttributes(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAttributes", reflect.TypeOf((*MockCognitoIDProvider)(nil).UpdateUserAttributes), varargs...)
}

// UpdateUserPool mocks base method.
func (m *MockCognitoIDProvider) UpdateUserPool(ctx context.Context, params *UpdateUserPoolInput, optFns ...func(*Options)) (*UpdateUserPoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserPool", varargs...)
	ret0, _ := ret[0].(*UpdateUserPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPool indicates an expected call of UpdateUserPool.
func (mr *MockCognitoIDProviderMockRecorder) UpdateUserPool(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPool", reflect.TypeOf((*MockCognitoIDProvider)(nil).UpdateUserPool), varargs...)
}

// UpdateUserPoolClient mocks base method.
func (m *MockCognitoIDProvider) UpdateUserPoolClient(ctx context.Context, params *UpdateUserPoolClientInput, optFns ...func(*Options)) (*UpdateUserPoolClientOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserPoolClient", varargs...)
	ret0, _ := ret[0].(*UpdateUserPoolClientOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPoolClient indicates an expected call of UpdateUserPoolClient.
func (mr *MockCognitoIDProviderMockRecorder) UpdateUserPoolClient(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPoolClient", reflect.TypeOf((*MockCognitoIDProvider)(nil).UpdateUserPoolClient), varargs...)
}

// UpdateUserPoolDomain mocks base method.
func (m *MockCognitoIDProvider) UpdateUserPoolDomain(ctx context.Context, params *UpdateUserPoolDomainInput, optFns ...func(*Options)) (*UpdateUserPoolDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserPoolDomain", varargs...)
	ret0, _ := ret[0].(*UpdateUserPoolDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPoolDomain indicates an expected call of UpdateUserPoolDomain.
func (mr *MockCognitoIDProviderMockRecorder) UpdateUserPoolDomain(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPoolDomain", reflect.TypeOf((*MockCognitoIDProvider)(nil).UpdateUserPoolDomain), varargs...)
}

// VerifySoftwareToken mocks base method.
func (m *MockCognitoIDProvider) VerifySoftwareToken(ctx context.Context, params *VerifySoftwareTokenInput, optFns ...func(*Options)) (*VerifySoftwareTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifySoftwareToken", varargs...)
	ret0, _ := ret[0].(*VerifySoftwareTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifySoftwareToken indicates an expected call of VerifySoftwareToken.
func (mr *MockCognitoIDProviderMockRecorder) VerifySoftwareToken(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySoftwareToken", reflect.TypeOf((*MockCognitoIDProvider)(nil).VerifySoftwareToken), varargs...)
}

// VerifyUserAttribute mocks base method.
func (m *MockCognitoIDProvider) VerifyUserAttribute(ctx context.Context, params *VerifyUserAttributeInput, optFns ...func(*Options)) (*VerifyUserAttributeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyUserAttribute", varargs...)
	ret0, _ := ret[0].(*VerifyUserAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserAttribute indicates an expected call of VerifyUserAttribute.
func (mr *MockCognitoIDProviderMockRecorder) VerifyUserAttribute(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserAttribute", reflect.TypeOf((*MockCognitoIDProvider)(nil).VerifyUserAttribute), varargs...)
}
